input {
  udp {
    port => 514
    type => syslog
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date {
      locale => "en"
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS" ]
      timezone => "America/New_York"
    }
    if [syslog_program] == "sysmon" and [syslog_message] =~ "<Event>" {
      xml {
        target => "sysmon"
        store_xml => false
        source => "syslog_message"
        xpath => {
          "//Event/System/EventID/text()" => "sysmon.EventID"
          "//Event/System/Version/text()" => "sysmon.Version"
          "//Event/System/Level/text()" => "sysmon.Level"
          "//Event/System/Task/text()" => "sysmon.Task"
          "//Event/EventData/Data[@Name='RuleName']/text()" => "sysmon.RuleName"
          "//Event/EventData/Data[@Name='ProcessId']/text()" => "sysmon.ProcessId"
          "//Event/EventData/Data[@Name='Image']/text()" => "sysmon.Image"
          "//Event/EventData/Data[@Name='CommandLine']/text()" => "sysmon.CommandLine"
          "//Event/EventData/Data[@Name='CurrentDirectory']/text()" => "sysmon.CurrentDirectory"
          "//Event/EventData/Data[@Name='User']/text()" => "sysmon.User"
          "//Event/EventData/Data[@Name='LogonId']/text()" => "sysmon.LogonId"
          "//Event/EventData/Data[@Name='TerminalSessionId']/text()" => "sysmon.TerminalSessionId"
          "//Event/EventData/Data[@Name='ParentProcessId']/text()" => "sysmon.ParentProcessId"
          "//Event/EventData/Data[@Name='ParentImage']/text()" => "sysmon.ParentImage"
          "//Event/EventData/Data[@Name='ParentCommandLine']/text()" => "sysmon.ParentCommandLine"
          "//Event/EventData/Data[@Name='ParentUser']/text()" => "sysmon.ParentUser"
          "//Event/EventData/Data[@Name='Protocol']/text()" => "sysmon.Protocol"
          "//Event/EventData/Data[@Name='SourceIp']/text()" => "sysmon.SourceIp"
          "//Event/EventData/Data[@Name='SourceHostname']/text()" => "sysmon.SourceHostname"
          "//Event/EventData/Data[@Name='SourcePort']/text()" => "sysmon.SourcePort"
          "//Event/EventData/Data[@Name='SourcePortName']/text()" => "sysmon.SourcePortName"
          "//Event/EventData/Data[@Name='DestinationIp']/text()" => "sysmon.DestinationIp"
          "//Event/EventData/Data[@Name='DestinationHostname']/text()" => "sysmon.DestinationHostname"
          "//Event/EventData/Data[@Name='DestinationPort']/text()" => "sysmon.DestinationPort"
          "//Event/EventData/Data[@Name='DestinationPortName']/text()" => "sysmon.DestinationPortName"
          "//Event/EventData/Data[@Name='TargetFilename']/text()" => "sysmon.TargetFilename" }
      }
      mutate {
        add_field => { "sysmon.Event" => "%{sysmon.EventID}" }
      }
      mutate {
        gsub => ["sysmon.Event", "^1$", "Process Create"]
        gsub => ["sysmon.Event", "^3$", "Network Connect"]
        gsub => ["sysmon.Event", "^4$", "Sysmon State Change"]
        gsub => ["sysmon.Event", "^5$", "Process Terminate"]
        gsub => ["sysmon.Event", "^9$", "Raw Access Read"]
        gsub => ["sysmon.Event", "^10$", "Access Process"]
        gsub => ["sysmon.Event", "^11$", "File Create"]
        gsub => ["sysmon.Event", "^16$", "Configuration Updated"]
        gsub => ["sysmon.Event", "^23$", "File Delete"]
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "syslog-%{+YYYY.MM.dd}"
    ilm_enabled => true
  }
  stdout { codec => rubydebug }
}
